{"version":3,"sources":["dataService.js","components/Card.js","App.js","reducers/reducer.js","store.js","serviceWorker.js","index.js"],"names":["getAll","a","axios","get","headers","response","data","results","map","el","url","info","name","liked","Promise","all","Card","props","className","style","onClick","handleClick","src","img","alt","height","weight","abilities","ability","App","dispatch","useDispatch","useSelector","state","useState","filtered","setFiltered","useEffect","dataService","then","res","type","console","log","like","card","updatedCard","class","onChange","target","rel","href","filter","n","sprites","front_default","reducer","action","cardToUpdate","find","id","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5d6b8c1.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst url= 'https://pokeapi.co/api/v2/pokemon'\r\n\r\nconst getAll = async () => {\r\n  const response = await axios.get(url, {\r\n    headers: {'Access-Control-Allow-Origin': '*'}\r\n  })\r\n  const data = response.data.results.map(async el => {\r\n    const info = await axios.get(el.url)\r\n    return { name: el.name, info: info.data, liked: false }\r\n  })\r\n  const results = await Promise.all(data)\r\n  return results\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { getAll }","\r\n\r\nconst Card = props => {\r\n  return(\r\n    <div className='card'>\r\n      <div className='title-container'>\r\n        <div className='header-container'>\r\n          <h3>{props.name}</h3>\r\n          <button style={props.liked ? {'color': '#FF6C6C'} : {}} onClick={props.handleClick} className='like'>\r\n            <p>&#10084;</p>\r\n          </button>\r\n        </div>\r\n        <img src={props.img} alt={props.name} />\r\n      </div>\r\n      <div className='stats-container'>\r\n        <p>height: {props.height}</p>\r\n        <p>weight: {props.weight}</p>\r\n      </div>\r\n      <div className='abilities-container'>\r\n        <strong>abilities:</strong>\r\n        <ul>{props.abilities.map(el => <li>{el.ability.name}</li>)}</ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card","import React, { useEffect, useState } from 'react';\r\nimport dataService from './dataService';\r\nimport './App.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Card from './components/Card';\r\n\r\nfunction App() {\r\n\r\n  const dispatch = useDispatch()\r\n  const data = useSelector(state => state)\r\n\r\n  const [filtered, setFiltered] = useState(false)\r\n\r\n  useEffect(() => {\r\n    dataService.getAll().then(res => {\r\n      dispatch({\r\n        type: 'DATA_INIT',\r\n        data: res\r\n      })\r\n    })\r\n  }, [dispatch])\r\n  console.log(data)\r\n\r\n  const like = card => {\r\n    console.log(card)\r\n    const updatedCard = { ...card, liked: !card.liked }\r\n    console.log(updatedCard)\r\n    dispatch({\r\n      type: 'LIKE',\r\n      data: updatedCard\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='switch-container'>\r\n        <label class=\"switch\">\r\n          <input onChange={() => setFiltered(!filtered)} type=\"checkbox\" />\r\n          <span class=\"slider round\"></span>\r\n        </label>\r\n        <label>Понравившиеся</label>\r\n      </div>\r\n      <p>Используемое API: <a target=\"_blank\" rel=\"noopener noreferrer\" href='https://pokeapi.co/'>pokeapi.co</a></p>\r\n      <div className='card-container'>\r\n        {!filtered ? data.map(el => \r\n          <Card \r\n            name={el.name}\r\n            weight={el.info.weight}\r\n            height={el.info.height}\r\n            img={el.info.sprites.front_default}\r\n            abilities={el.info.abilities} \r\n            key={el.name}\r\n            liked={el.liked}\r\n            handleClick={() => like(el)} \r\n          />) : data.filter(n => n.liked).map(el => \r\n            <Card \r\n            name={el.name}\r\n            weight={el.info.weight}\r\n            height={el.info.height}\r\n            img={el.info.sprites.front_default}\r\n            abilities={el.info.abilities} \r\n            key={el.name}\r\n            liked={el.liked}\r\n            handleClick={() => like(el)} \r\n          />\r\n          )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reducer = (state = [], action) => {\r\n  switch(action.type) {\r\n    case 'DATA_INIT':\r\n      return action.data\r\n    case 'LIKE':\r\n      const cardToUpdate = state.find(n => n.info.id === action.data.info.id)\r\n      return state.map(el => el.info.id === cardToUpdate.info.id ? action.data : el)\r\n    default: return state\r\n    }\r\n}\r\n\r\nexport default reducer","import { createStore } from \"redux\";\r\nimport reducer from \"./reducers/reducer\";\r\n\r\nconst store = createStore(reducer)\r\n\r\nexport default store","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}